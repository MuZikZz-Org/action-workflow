name: POC_package_versioning
on: 
  workflow_dispatch:
  workflow_call:
    inputs:
      Runtime:
        required: true
        type: string
      JobEnvironment:
        required: true
        type: string
    outputs:
      PACKAGE_VERSION_JAVA:
        description: "set output"
        value: ${{ jobs.java-maven.outputs.PACKAGE_VERSION }}
      PACKAGE_VERSION_NODEJS:
        description: "set output"
        value: ${{ jobs.nodejs.outputs.PACKAGE_VERSION }}

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Print Runtime Input
        run: echo "Runtime is ${{ github.event.inputs.Runtime }}"

  nodejs:
    if: ${{ inputs.Runtime == 'nodejs' }}
    outputs:
      PACKAGE_VERSION: ${{ steps.read-package-version.outputs.PACKAGE_VERSION }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install Groovy
        run: |
          sudo apt-get update
          sudo apt-get install groovy -y

      - name: Get current date
        id: date
        run: |
            echo "today=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
            echo "JOB_ENVIRONMENT=${{ inputs.JobEnvironment }}" >> $GITHUB_ENV

      - name: Package Versioning groovy script
        id: set-package-version
        run: |
          groovy -e '''
            import hudson.model.*
            // Assign input to a variable
            def jobEnvironment = System.getenv("JOB_ENVIRONMENT")
            println "Job Environment: ${jobEnvironment}"

              def json = new File("package.json").text
              def parsedJson = new groovy.json.JsonSlurper().parseText(json)
              def packageVersionInJson =  parsedJson.version
              println "Package Version (package.json): ${packageVersionInJson}"

              // Initialize PackageVersion variable
              def PackageVersion = ""
              
                // For DEV ENV //
                if ("${jobEnvironment}" == "feature-branch") {
                  def versionSplit = packageVersionInXml.split("\\.")
                  int lastDigitVersion = "${versionSplit[versionSplit.size() - 1]}".toInteger()
                  String perfixVersion = "${versionSplit[0]}.${versionSplit[1]}"
                  int nextVersion = lastDigitVersion + 1
                  String newVersion = "${perfixVersion}.${nextVersion}"
                  PackageVersion = "${newVersion}".trim()
                  println "DEV Version: ${PackageVersion}"
                              
                } else {
                  // For SIT ENV //
                  println "date: ${{steps.date.outputs.today}}"
                  def versionSplit = packageVersionInXml.split("\\.")
                  int lastDigitVersion = "${versionSplit[versionSplit.size() - 1]}".toInteger()
                  String perfixVersion = "${versionSplit[0]}.${versionSplit[1]}"
                  int nextVersion = lastDigitVersion + 1
                  String newVersion = "${perfixVersion}.${nextVersion}"
                  PackageVersion = "${newVersion}-${{steps.date.outputs.today}}-${{github.run_number}}".trim()
                  println "SIT Version: ${PackageVersion}"
                }

                // Write PackageVersion value to a temporary file
                new File("package_version.txt").write(PackageVersion)

          '''

      - name: Read PACKAGE_VERSION from file
        id: read-package-version
        run: |
          PACKAGE_VERSION=$(cat package_version.txt)
          echo "::set-output name=PACKAGE_VERSION::$PACKAGE_VERSION"
        
      - name: Use PACKAGE_VERSION output
        run: |
            echo "Package Version: ${{ steps.read-package-version.outputs.PACKAGE_VERSION }}"

  java-maven:
    if: ${{ inputs.Runtime == 'java' }}
    runs-on: ubuntu-latest
    outputs:
      PACKAGE_VERSION: ${{ steps.read-package-version.outputs.PACKAGE_VERSION }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install Groovy
        run: |
          sudo apt-get update
          sudo apt-get install groovy -y

      - name: Get current date
        id: date
        run: |
            echo "today=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
            echo "JOB_ENVIRONMENT=${{ inputs.JobEnvironment }}" >> $GITHUB_ENV

      - name: Package Versioning groovy script
        id: set-package-version
        run: |
          groovy -e '''
            import hudson.model.*
            // Assign input to a variable
            def jobEnvironment = System.getenv("JOB_ENVIRONMENT")
            println "Job Environment: ${jobEnvironment}"

              def pomFile = new File("pom.xml").text
              def xml = new XmlSlurper().parseText(pomFile)
              def packageVersionInXml = xml.version.text()
              println "Package Version (pom.xml): ${packageVersionInXml}"

              // Initialize PackageVersion variable
              def PackageVersion = ""
              
                // For DEV ENV //
                if ("${jobEnvironment}" == "feature-branch") {
                  def versionSplit = packageVersionInXml.split("\\.")
                  int lastDigitVersion = "${versionSplit[versionSplit.size() - 1]}".toInteger()
                  String perfixVersion = "${versionSplit[0]}.${versionSplit[1]}"
                  int nextVersion = lastDigitVersion + 1
                  String newVersion = "${perfixVersion}.${nextVersion}"
                  PackageVersion = "${newVersion}".trim()
                  println "DEV Version: ${PackageVersion}"
                              
                } else {
                  // For SIT ENV //
                  println "date: ${{steps.date.outputs.today}}"
                  def versionSplit = packageVersionInXml.split("\\.")
                  int lastDigitVersion = "${versionSplit[versionSplit.size() - 1]}".toInteger()
                  String perfixVersion = "${versionSplit[0]}.${versionSplit[1]}"
                  int nextVersion = lastDigitVersion + 1
                  String newVersion = "${perfixVersion}.${nextVersion}"
                  PackageVersion = "${newVersion}-${{steps.date.outputs.today}}-${{github.run_number}}".trim()
                  println "SIT Version: ${PackageVersion}"
                }

                // Write PackageVersion value to a temporary file
                new File("package_version.txt").write(PackageVersion)

          '''

      - name: Read PACKAGE_VERSION from file
        id: read-package-version
        run: |
          PACKAGE_VERSION=$(cat package_version.txt)
          echo "::set-output name=PACKAGE_VERSION::$PACKAGE_VERSION"
        
      - name: Use PACKAGE_VERSION output
        run: |
            echo "Package Version: ${{ steps.read-package-version.outputs.PACKAGE_VERSION }}"
